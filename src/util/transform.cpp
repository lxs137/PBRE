//
// Created by lxs on 17-3-27.
//

#include "transform.h"

Matrix4_4 Matrix4_4::Inverse() {
    Matrix4_4 inver = Matrix4_4();
    float norm_1 = 1/this->Norm();
    inver.m[0][0] = norm_1*(m[1][1]*m[2][2]*m[3][3] + m[1][2]*m[2][3]*m[3][1] + m[2][1]*m[3][2]*m[1][3]
                            - m[3][1]*m[2][2]*m[1][3] - m[2][3]*m[3][2]*m[1][1] - m[3][3]*m[1][2]*m[2][1]);
    inver.m[1][0] = norm_1*(m[3][0]*m[2][2]*m[1][3] + m[2][3]*m[3][2]*m[1][0] + m[2][0]*m[1][2]*m[3][3]
                            - m[1][0]*m[2][2]*m[3][3] - m[1][2]*m[2][3]*m[3][0] - m[2][0]*m[3][2]*m[1][3]);
    inver.m[2][0] = norm_1*(m[1][0]*m[2][1]*m[3][3] + m[1][1]*m[2][3]*m[3][0] + m[2][0]*m[3][1]*m[1][3]
                            - m[3][0]*m[2][1]*m[1][3] - m[3][1]*m[2][3]*m[1][0] - m[3][3]*m[2][0]*m[1][1]);
    inver.m[3][0] = norm_1*(m[3][0]*m[2][0]*m[1][2] + m[3][1]*m[2][2]*m[1][0] + m[1][1]*m[2][0]*m[3][2]
                            - m[1][0]*m[2][1]*m[3][2] - m[1][1]*m[2][2]*m[3][0] - m[2][0]*m[3][1]*m[1][2]);

    inver.m[0][1] = -norm_1*(m[0][1]*m[2][2]*m[3][3] + m[0][2]*m[2][3]*m[3][1] + m[2][1]*m[3][2]*m[0][3]
                            - m[3][1]*m[2][2]*m[0][3] - m[2][3]*m[3][2]*m[0][1] - m[3][3]*m[0][2]*m[2][1]);
    inver.m[1][1] = -norm_1*(m[3][0]*m[2][2]*m[0][3] + m[2][3]*m[3][2]*m[0][0] + m[2][0]*m[0][2]*m[3][3]
                            - m[0][0]*m[2][2]*m[3][3] - m[0][2]*m[2][3]*m[3][0] - m[2][0]*m[3][2]*m[0][3]);
    inver.m[2][1] = -norm_1*(m[0][0]*m[2][1]*m[3][3] + m[0][1]*m[2][3]*m[3][0] + m[2][0]*m[3][1]*m[0][3]
                            - m[3][0]*m[2][1]*m[0][3] - m[3][1]*m[2][3]*m[0][0] - m[3][3]*m[2][0]*m[0][1]);
    inver.m[3][1] = -norm_1*(m[3][0]*m[2][0]*m[0][2] + m[3][1]*m[2][2]*m[0][0] + m[0][1]*m[2][0]*m[3][2]
                            - m[0][0]*m[2][1]*m[3][2] - m[0][1]*m[2][2]*m[3][0] - m[2][0]*m[3][1]*m[0][2]);

    inver.m[0][2] = norm_1*(m[0][1]*m[1][2]*m[3][3] + m[0][2]*m[1][3]*m[3][1] + m[1][1]*m[3][2]*m[0][3]
                            - m[3][1]*m[1][2]*m[0][3] - m[1][3]*m[3][2]*m[0][1] - m[3][3]*m[0][2]*m[1][1]);
    inver.m[1][2] = norm_1*(m[3][0]*m[1][2]*m[0][3] + m[1][3]*m[3][2]*m[0][0] + m[1][0]*m[0][2]*m[3][3]
                            - m[0][0]*m[1][2]*m[3][3] - m[0][2]*m[1][3]*m[3][0] - m[1][0]*m[3][2]*m[0][3]);
    inver.m[2][2] = norm_1*(m[0][0]*m[1][1]*m[3][3] + m[0][1]*m[1][3]*m[3][0] + m[1][0]*m[3][1]*m[0][3]
                            - m[3][0]*m[1][1]*m[0][3] - m[3][1]*m[1][3]*m[0][0] - m[3][3]*m[1][0]*m[0][1]);
    inver.m[3][2] = norm_1*(m[3][0]*m[1][0]*m[0][2] + m[3][1]*m[1][2]*m[0][0] + m[0][1]*m[1][0]*m[3][2]
                            - m[0][0]*m[1][1]*m[3][2] - m[0][1]*m[1][2]*m[3][0] - m[1][0]*m[3][1]*m[0][2]);

    inver.m[0][3] = -norm_1*(m[0][1]*m[1][2]*m[2][3] + m[0][2]*m[1][3]*m[2][1] + m[1][1]*m[2][2]*m[0][3]
                            - m[2][1]*m[1][2]*m[0][3] - m[1][3]*m[2][2]*m[0][1] - m[2][3]*m[0][2]*m[1][1]);
    inver.m[1][3] = -norm_1*(m[2][0]*m[1][2]*m[0][3] + m[1][3]*m[2][2]*m[0][0] + m[1][0]*m[0][2]*m[2][3]
                            - m[0][0]*m[1][2]*m[2][3] - m[0][2]*m[1][3]*m[2][0] - m[1][0]*m[2][2]*m[0][3]);
    inver.m[2][3] = -norm_1*(m[0][0]*m[1][1]*m[2][3] + m[0][1]*m[1][3]*m[2][0] + m[1][0]*m[2][1]*m[0][3]
                           - m[2][0]*m[1][1]*m[0][3] - m[2][1]*m[1][3]*m[0][0] - m[2][3]*m[1][0]*m[0][1]);
    inver.m[3][3] = -norm_1*(m[2][0]*m[1][0]*m[0][2] + m[2][1]*m[1][2]*m[0][0] + m[0][1]*m[1][0]*m[2][2]
                            - m[0][0]*m[1][1]*m[2][2] - m[0][1]*m[1][2]*m[2][0] - m[1][0]*m[2][1]*m[0][2]);
    return inver;
}
float Matrix4_4::Norm() {
    return (m[0][0]*(m[1][1]*m[2][2]*m[3][3] + m[1][2]*m[2][3]*m[3][1] + m[3][1]*m[1][2]*m[2][3]
                     - m[3][1]*m[2][2]*m[1][3] - m[2][3]*m[3][2]*m[1][1] - m[3][3]*m[1][2]*m[2][1])
            + m[0][1]*(m[3][0]*m[2][2]*m[1][3] + m[2][3]*m[3][2]*m[1][0] + m[2][0]*m[1][2]*m[3][3]
                       - m[1][0]*m[2][2]*m[3][3] - m[1][2]*m[2][3]*m[3][0] - m[2][0]*m[3][2]*m[1][3])
            + m[0][2]*(m[1][0]*m[2][1]*m[3][3] + m[1][1]*m[2][3]*m[3][0] + m[2][0]*m[3][1]*m[1][3]
                       - m[3][0]*m[2][1]*m[1][3] - m[3][1]*m[2][3]*m[1][0] - m[3][3]*m[2][0]*m[1][1])
            + m[0][3]*(m[3][0]*m[2][0]*m[1][2] + m[3][1]*m[2][2]*m[1][0] + m[1][1]*m[2][0]*m[3][2]
                       - m[1][0]*m[2][1]*m[3][2] - m[1][1]*m[2][2]*m[3][0] - m[2][0]*m[3][1]*m[1][2]));
}
Transform Translate(const Vector3D &v) {
    Matrix4_4 m();

}
Transform Scale(float x_scale, float y_scale, float z_scale);
Transform RotateX(float degree);
Transform RotateY(float degree);
Transform RotateZ(float degree);
